// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/google/wire"
	"waizly/internal/config"
	"waizly/internal/delivery/http/controller"
	"waizly/internal/delivery/http/middleware"
	"waizly/internal/delivery/http/route"
	"waizly/internal/repository"
	"waizly/internal/usecase"
)

// Injectors from injector.go:

func InitializeServer() *config.App {
	viper := config.NewViper()
	ginConfig := config.NewGin(viper)
	welcomeController := controller.NewWelcomeController()
	db := config.NewDatabase(viper)
	userRepository := repository.NewUserRepository()
	jwtWrapper := config.NewJwtWrapper(viper)
	validate := config.NewValidator()
	userUseCase := usecase.NewUserUseCase(db, userRepository, jwtWrapper, validate)
	authController := controller.NewAuthController(userUseCase)
	authMiddleware := middleware.NewAuthMiddleware(userUseCase)
	taxRepository := repository.NewTaxRepository()
	taxUseCase := usecase.NewTaxUseCase(db, taxRepository, validate)
	taxController := controller.NewTaxController(taxUseCase)
	currencyRepository := repository.NewCurrencyRepository()
	currencyUseCase := usecase.NewCurrencyUseCase(db, currencyRepository, validate)
	currencyController := controller.NewCurrencyController(currencyUseCase)
	itemRepository := repository.NewItemRepository()
	itemUseCase := usecase.NewItemUseCase(db, itemRepository, validate)
	itemController := controller.NewItemController(itemUseCase)
	customerRepository := repository.NewCustomerRepository()
	customerUseCase := usecase.NewCustomerUseCase(db, customerRepository, validate)
	customerController := controller.NewCustomerController(customerUseCase)
	invoiceRepository := repository.NewInvoiceRepository()
	invoiceItemRepository := repository.NewInvoiceItemRepository()
	invoiceUseCase := usecase.NewInvoiceUseCase(db, invoiceRepository, invoiceItemRepository, customerRepository, taxRepository, currencyRepository, userRepository, validate)
	invoiceController := controller.NewInvoiceController(invoiceUseCase)
	userController := controller.NewUserController(userUseCase)
	configRoute := route.NewConfigRoute(welcomeController, authController, authMiddleware, taxController, currencyController, itemController, customerController, invoiceController, userController)
	logger := config.NewLogger(viper)
	app := config.NewApp(ginConfig, configRoute, viper, db, logger)
	return app
}

// injector.go:

var configSet = wire.NewSet(config.NewViper, config.NewLogger, config.NewValidator, config.NewGin, config.NewApp, config.NewDatabase, config.NewJwtWrapper)

var controllerSet = wire.NewSet(controller.NewWelcomeController, controller.NewAuthController, controller.NewTaxController, controller.NewCurrencyController, controller.NewItemController, controller.NewCustomerController, controller.NewInvoiceController, controller.NewUserController)

var repositorySet = wire.NewSet(repository.NewUserRepository, repository.NewCustomerRepository, repository.NewInvoiceRepository, repository.NewInvoiceItemRepository, repository.NewItemRepository, repository.NewTaxRepository, repository.NewCurrencyRepository)

var usecaseSet = wire.NewSet(usecase.NewUserUseCase, usecase.NewTaxUseCase, usecase.NewCurrencyUseCase, usecase.NewItemUseCase, usecase.NewCustomerUseCase, usecase.NewInvoiceUseCase)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)
